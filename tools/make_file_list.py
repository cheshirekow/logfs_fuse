#!/usr/bin/python
"""Given an access log as created by logfs_fuse, merge all file accesses into a
   list of files accessed without duplicates, and write that list to a new
   file."""

import argparse
import sys
import time


def fmt_out(fmt_str, *args, **kwargs):
  """Write the string to stdout and flush."""

  sys.stdout.write(fmt_str.format(*args, **kwargs))
  sys.stdout.flush()


def process_log(infile, outfile):
  """See module docsting."""

  infile.seek(0, 2)
  infile_size = infile.tell()
  infile.seek(0, 0)

  fileset = set()
  last_print_time = 0
  num_lines = 0
  for line in iter(infile.readline, b''):
    filename = line.split(':')[1]
    fileset.add(filename.strip())
    num_lines += 1

    now = time.time()
    if now - last_print_time > 0.1:
      fraction = 100 * infile.tell() / float(infile_size)
      last_print_time = now
      fmt_out('\rProcessed {} lines: {:6.2f}%', num_lines, fraction)
  fmt_out('\rProcessed {} lines: 100.00%\n', num_lines)
  fmt_out('Sorting files: ')
  fileset_sorted = sorted(fileset)
  fileset_size = len(fileset_sorted)
  fmt_out('Done\n')

  num_lines = 0
  for line in sorted(fileset):
    outfile.write(line)
    outfile.write('\n')
    num_lines += 1

    now = time.time()
    if now - last_print_time > 0.1:
      last_print_time = now
      fraction = 100 * num_lines / float(fileset_size)
      fmt_out('\rWrote {} lines : {:6.2f}%', num_lines, fraction)
  fmt_out('\rWrote {} lines : 100.00%\n', num_lines)
  return 0

DESCRIPTION_STRING = """
Process an access log generated by logfs_fuse, and merge all accesses into a
unified list of files that were accessed, without duplicates. Write the sorted
list to a new file.

Supply "-" (hyphen/minus) as the input file or output file to read from stdin
or write to stdout.
"""


def main():
  """Just parses arguments and then calls process_log."""

  parser = argparse.ArgumentParser(description=DESCRIPTION_STRING)
  parser.add_argument('-i', '--input-file', default='-',
                      help='logfs_fuse generated access log')
  parser.add_argument('-o', '--output-file', default='-',
                      help='output file to write')
  args = parser.parse_args()
  if args.input_file == '-':
    infile = sys.stdin
  else:
    infile = open(args.input_file, 'r')

  if args.output_file == '-':
    outfile = sys.stdout
  else:
    outfile = open(args.output_file, 'w')

  exit_code = process_log(infile, outfile)
  sys.exit(exit_code)

if __name__ == '__main__':
  main()
